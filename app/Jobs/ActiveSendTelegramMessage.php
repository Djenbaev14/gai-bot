<?php

namespace App\Jobs;

use App\Models\Customer;
use App\Models\GayApplication;
use App\Models\QueueNumber;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Telegram\Bot\Api;

class ActiveSendTelegramMessage implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $gayApplicationId;
    protected $userId;

    public function __construct(int $gayApplicationId, int $userId)
    {
        $this->gayApplicationId = $gayApplicationId;
        $this->userId = $userId;
    }

    public function handle(): void
    {
        $record = GayApplication::find($this->gayApplicationId);
        if (!$record) return;

        $record->update(['status_id' => 2]); // 2 - active

        $lastQueueNumber = QueueNumber::max('queue_number') ?? 0;
        $myQueueNumber = $lastQueueNumber + 1;

        $queue = QueueNumber::create([
            'user_id' => $this->userId,
            'customer_id' => $record->customer_id,
            'gay_application_id' => $record->id,
            'branch_id' => $record->branch_id,
            'queue_number' => $myQueueNumber,
        ]);

        // Telegramga yuborish
        $customer = Customer::find($record->customer_id);
        if (!$customer) return;

        $telegram = new Api(env('TELEGRAM_BOT_TOKEN'));

        // $lastQueueNumber = QueueNumber::where('branch_id', $record->branch_id)->max('queue_number');

        $lastQueue = GayApplication::where('branch_id', $record->branch_id)
                            ->whereHas('status', function (Builder $query) {
                                $query->where('key', '=', 'completed');
                            })->latest()->first();
        $lastQueueNumber = $lastQueue?->queueNumber?->queue_number ?? 0;
        $waitingCount = GayApplication::whereHas('status', fn ($q) => $q->where('key', 'active'))
            ->whereHas('queueNumber', function ($q) use ($lastQueueNumber, $myQueueNumber) {
                $q->where('queue_number', '>', $lastQueueNumber)
                  ->where('queue_number', '<', $myQueueNumber);
            })->count();

        $waiting = $waitingCount > 0
            ? "‚ùáÔ∏è –°–∏–∑–¥–∏“£ –∞–ª–¥—ã“£—ã–∑–¥–∞ $waitingCount –ø—É“≥–∞—Ä–∞ –±–∞—Ä"
            : "–°–∏–∑–¥–∏“£ –∞–ª–¥—ã“£—ã–∑–¥–∞ –µ—à–∫–∏–º –∂–æ–∫";

        $lastQueueText = $lastQueueNumber > 0
            ? "‚úÖ –ê“õ—ã—Ä“ì—ã –∫–∏—Ä–≥–µ–Ω –Ω–∞—û–±–µ—Ç:  ‚Ññ $lastQueueNumber"
            : "–ï–ª–µ –µ—à–∫–∏–º —Ç–µ—Å—Ç–∫–µ –∫–∏—Ä–≥–µ–Ω –∂–æ–∫";

        $telegram->sendMessage([
            'chat_id' => $customer->telegram_user_id,
            'text' => "<blockquote> üì± –¢–µ–ª–µ—Ñ–æ–Ω:$customer->phone_number\nüë§ –§–ò–û:$customer->full_name\nüÜî –ü–∞—Å–ø–æ—Ä—Ç:$customer->passport\n\n\n‚≠ïÔ∏è –°–∏–∑–¥–∏“£ –Ω–∞—û–±–µ—Ç:  ‚Ññ $myQueueNumber\n\n$lastQueueText\n$waiting\n\n–¢–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä—ã—É –æ—Ä–Ω—ã–Ω—ã–∑: $record->branch_name\n\n–ö“Ø–Ω–∏–Ω–µ –æ—Ä—Ç–∞—à–∞ 300-400 –ø—É“≥–∞—Ä–∞ –∏–º—Ç–∏—Ö–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—û–≥–∞ —É–ª–≥–µ—Ä–µ–¥–∏ !\n\n–ò–º—Ç–∏“≥–∞–Ω–ª–∞—Ä  —Å–∞–∞—Ç 09:00 ‚Äì 18:00  , —Ö”ô–ø—Ç–µ–Ω–∏“£ 1,3,5 –∫“Ø–Ω–ª–µ—Ä–∏ –±–æ–ª—ã–ø ”©—Ç–µ–¥–∏ \n\n–ñ–∞“£–∞–ª—ã“õ–ª–∞—Ä–¥–∞–Ω —Ö–∞–±–∞—Ä–¥–∞—Ä –±–æ–ª—ã—û —É—à—ã–Ω –∫–∞–Ω–∞–ª“ì–∞ –∫–∏—Ä–∏“£\n üëâ https://t.me/+oR4I260MLxszYTAy </blockquote>",
            'parse_mode' => 'HTML',
        ]);
    }
}
