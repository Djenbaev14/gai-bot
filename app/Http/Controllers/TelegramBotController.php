<?php

namespace App\Http\Controllers;

use App\Models\Customer;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Telegram\Bot\Api;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Laravel\Facades\Telegram;

class TelegramBotController extends Controller
{
    

    public $text, $chat_id;
    public $telegram, $bot_user;
    public $my_chat_id;
    public $menu_url, $main_menu_inline;
    public $request_all;
    public function __construct(Request $request)
    {
        $this->request_all = $request->all();
        $this->text = $request->input('message.text');
        $this->chat_id = $request->input('message.chat.id') ?? $request->input('callback_query.message.chat.id');
        $this->my_chat_id = env('TELEGRAM_MY_CHAT_ID');
        $this->telegram = new Api(env('TELEGRAM_BOT_TOKEN'));


        // if ($this->chat_id) {

        //     $keyboard = Keyboard::make()
        //         ->setResizeKeyboard(true)
        //         ->setOneTimeKeyboard(true)
        //         ->row([
        //             Keyboard::button([
        //                 'text' => 'üìû –ö–æ–Ω—Ç–∞–∫—Ç –∂–∏–±–µ—Ä–∏—û',
        //                 'request_contact' => true,
        //             ]),
        //         ]);

        //     // Foydalanuvchiga xabar va tugma yuboramiz
        //     $this->replyWithMessage([
        //         'text' => "–ê–π–¥–∞—û—à—ã–ª—ã“õ –∏–º—Ç–∏“≥–∞–Ω—ã —É—à—ã–Ω –Ω–∞—û–±–µ—Ç –∞–ª—ã—û –±–æ—Ç—ã–Ω–∞ —Ö–æ—à –∫–µ–ª–∏–±—Å–∏–∑!\n–ù–∞—û–±–µ—Ç –∞–ª—ã—û —É—à—ã–Ω —Ç”©–º–µ–Ω–¥–µ–≥–∏ —Ç“Ø–π–º–µ–Ω–∏ –±–∞—Å—ã“£\n\n–î–∞–ø—Ç–µ—Ä–¥–µ–≥–∏ –Ω–∞—É–±–µ—Ç–ª–µ—Ä 3 —Ñ–∏–ª–∏–∞–ª –∏—Å–∫–µ —Ç—É—Å–∫–µ–Ω–∏ —É—à—ã–Ω –±–∏–π–∫–∞—Ä –µ—Ç–∏–ª–¥–∏ ‚ùå–¥–∞–ø—Ç–µ—Ä–¥–µ –±–∞—Ä–ª–∞—Ä –±–æ—Ç—Ç–∞–Ω –Ω–∞—É–±–µ—Ç –∞–ª—ã–Ω ‚≠ïÔ∏è",
        //         'reply_markup' => $keyboard,
        //     ]);
        // }
    }

    public function handle(Request $request)
    {
        try {
            $this->sendAction('typing');
            if($this->text == '/start'){
                
                $keyboard = Keyboard::make()
                    ->setResizeKeyboard(true)
                    ->setOneTimeKeyboard(true)
                    ->row([
                        Keyboard::button([
                            'text' => 'üìû –ö–æ–Ω—Ç–∞–∫—Ç –∂–∏–±–µ—Ä–∏—û',
                            'request_contact' => true,
                        ]),
                    ]);

                $this->replyWithMessage([
                    'text' => "–ê–π–¥–∞—û—à—ã–ª—ã“õ –∏–º—Ç–∏“≥–∞–Ω—ã —É—à—ã–Ω –Ω–∞—û–±–µ—Ç –∞–ª—ã—û –±–æ—Ç—ã–Ω–∞ —Ö–æ—à –∫–µ–ª–∏–±—Å–∏–∑!\n–ù–∞—û–±–µ—Ç –∞–ª—ã—û —É—à—ã–Ω —Ç”©–º–µ–Ω–¥–µ–≥–∏ —Ç“Ø–π–º–µ–Ω–∏ –±–∞—Å—ã“£\n\n–î–∞–ø—Ç–µ—Ä–¥–µ–≥–∏ –Ω–∞—É–±–µ—Ç–ª–µ—Ä 3 —Ñ–∏–ª–∏–∞–ª –∏—Å–∫–µ —Ç—É—Å–∫–µ–Ω–∏ —É—à—ã–Ω –±–∏–π–∫–∞—Ä –µ—Ç–∏–ª–¥–∏ ‚ùå–¥–∞–ø—Ç–µ—Ä–¥–µ –±–∞—Ä–ª–∞—Ä –±–æ—Ç—Ç–∞–Ω –Ω–∞—É–±–µ—Ç –∞–ª—ã–Ω ‚≠ïÔ∏è",
                    'reply_markup' => $keyboard,
                ]);

                
                $this->bot_user->update([
                    'state' => 'start'
                ]);

                exit();
            }
            // if ($message->has('contact')) {
            //     $phone = $message->contact->phone_number;
            //     Customer::updateOrCreate(
            //         ['telegram_user_id' => $chatId],
            //         ['phone_number' => $phone]
            //     );
            //     Cache::put("user:{$chatId}:phone", $phone, 600);
            //     Cache::forget("user:{$chatId}:name");
            //     Cache::forget("user:{$chatId}:passport");
            //     Cache::forget("user:{$chatId}:step");
            //     Cache::forget("user:{$chatId}:id");
            //     Cache::forget("user:{$chatId}:number");
            //     Cache::forget("user:{$chatId}:fileName");
            //     Cache::forget("user:{$chatId}:region");
            //     Cache::forget("user:{$chatId}:branch");
    
            //     $keyboard = Keyboard::make()
            //         ->setResizeKeyboard(true)
            //         ->setOneTimeKeyboard(false)
            //         ->row([
            //             Keyboard::button(['text' => '‚úçÔ∏è –ù–∞—û–±–µ—Ç–∫–µ –∂–∞–∑—ã–ª—ã—û']),
            //             Keyboard::button(['text' => 'üìã –ù–∞—û–±–µ—Ç—Ç–∏ —Ç–µ–∫—Å–µ—Ä–∏—û']),
            //         ]);
    
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => '–ö–µ—Ä–µ–∫–ª–∏ ”ô–º–µ–ª–¥–∏ —Å–∞–π–ª–∞“£:',
            //         'reply_markup' => $keyboard,
            //     ]);
            // }
            // if ($text === '/start') {
            //     $command = new StartCommand();
            //     $command->makeTelegram($telegram);
            //     $command->makeUpdate($update);
            //     $command->handle();
            //     return;
            // }
            // // 2. Navbatni korish
            // if ($text === 'üìã –ù–∞—û–±–µ—Ç—Ç–∏ —Ç–µ–∫—Å–µ—Ä–∏—û') {
    
            //     $customer = Customer::where('telegram_user_id','=',$chatId)->first();
            //     $myQueue=GayApplication::where('customer_id',$customer->id)->where('status_id',2)->latest()->first();
                
            //     if($myQueue){
            //         $lastQueue = GayApplication::where('branch_id',$myQueue->branch_id)->whereHas('status', function (Builder $query) {
            //             $query->where('key', '=', 'completed');
            //         })->latest()->first();
    
            //         $lastQueueNumber = $lastQueue?->queueNumber?->queue_number ?? 0;
        
            //         $lastQueueText=$lastQueueNumber > 0 ? "‚úÖ –ê“õ—ã—Ä“ì—ã –∫–∏—Ä–≥–µ–Ω –Ω–∞—û–±–µ—Ç:  ‚Ññ $lastQueueNumber": "–ï–ª–µ –µ—à–∫–∏–º —Ç–µ—Å—Ç–∫–µ –∫–∏—Ä–≥–µ–Ω –∂–æ–∫";
                
            //         $myQueueNumber=$myQueue->queueNumber->queue_number;
    
            //         $waitingCount = GayApplication::where('branch_id', $myQueue->branch_id)
            //         ->whereHas('status', function (Builder $query) {
            //             $query->where('key', '=','active');
            //         })->whereHas('queueNumber', function (Builder $query) use ($lastQueueNumber, $myQueueNumber) {
            //             $query->where('queue_number', '>', $lastQueueNumber)
            //                   ->where('queue_number', '<', $myQueueNumber);
            //         })->count();
            //         $waiting=$waitingCount>0 ? "‚ùáÔ∏è –°–∏–∑–¥–∏“£ –∞–ª–¥—ã“£—ã–∑–¥–∞ $waitingCount –ø—É“≥–∞—Ä–∞ –±–∞—Ä": "–°–∏–∑–¥–∏“£ –∞–ª–¥—ã“£—ã–∑–¥–∞ –µ—à–∫–∏–º –∂–æ–∫";
                    
            //         $telegram->sendMessage([
            //             'chat_id' => $chatId, // Foydalanuvchining chat_id sini olish
            //             'text' => "üì± –¢–µ–ª–µ—Ñ–æ–Ω:$customer->phone_number\nüë§ –§–ò–û:$customer->full_name\nüÜî –ü–∞—Å–ø–æ—Ä—Ç:$customer->passport\n\n‚ùóÔ∏è–¢–µ—Å—Ç —Ç–∞–ø—Å—ã—Ä—ã—É –æ—Ä–Ω—ã–Ω—ã–∑: $myQueue->branch_name\n\n‚≠ïÔ∏è –°–∏–∑–¥–∏“£ –Ω–∞—û–±–µ—Ç:  ‚Ññ $myQueueNumber\n\n$lastQueueText\n$waiting\n\n–ö“Ø–Ω–∏–Ω–µ –æ—Ä—Ç–∞—à–∞ 300-400 –ø—É“≥–∞—Ä–∞ –∏–º—Ç–∏—Ö–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—û–≥–∞ —É–ª–≥–µ—Ä–µ–¥–∏ !\n\n–ò–º—Ç–∏“≥–∞–Ω–ª–∞—Ä  —Å–∞–∞—Ç 09:00 ‚Äì 18:00  , —Ö”ô–ø—Ç–µ–Ω–∏“£ 1,3,5 –∫“Ø–Ω–ª–µ—Ä–∏ –±–æ–ª—ã–ø ”©—Ç–µ–¥–∏ \n\n–ñ–∞“£–∞–ª—ã“õ–ª–∞—Ä–¥–∞–Ω —Ö–∞–±–∞—Ä–¥–∞—Ä –±–æ–ª—ã—û —É—à—ã–Ω –∫–∞–Ω–∞–ª“ì–∞ –∫–∏—Ä–∏“£\n üëâ https://t.me/+oR4I260MLxszYTAy",
            //         ]);
            //     }else{
            //         $active='‚≠ïÔ∏è –°–∏–∑–¥–µ –∞–∫—Ç–∏–≤ –Ω–∞—É–±–µ—Ç –∂–æ–∫';
            //         $telegram->sendMessage([
            //             'chat_id' => $chatId, // Foydalanuvchining chat_id sini olish
            //             'text' => "üì± –¢–µ–ª–µ—Ñ–æ–Ω:$customer->phone_number\nüë§ –§–ò–û:$customer->full_name\nüÜî –ü–∞—Å–ø–æ—Ä—Ç:$customer->passport\n\n\n$active\n\n–ö“Ø–Ω–∏–Ω–µ –æ—Ä—Ç–∞—à–∞ 300-400 –ø—É“≥–∞—Ä–∞ –∏–º—Ç–∏—Ö–∞–Ω —Ç–∞–ø—Å—ã—Ä—ã—û–≥–∞ —É–ª–≥–µ—Ä–µ–¥–∏ !\n\n–ò–º—Ç–∏“≥–∞–Ω–ª–∞—Ä  —Å–∞–∞—Ç 09:00 ‚Äì 18:00  , —Ö”ô–ø—Ç–µ–Ω–∏“£ 1,3,5 –∫“Ø–Ω–ª–µ—Ä–∏ –±–æ–ª—ã–ø ”©—Ç–µ–¥–∏ \n\n–ñ–∞“£–∞–ª—ã“õ–ª–∞—Ä–¥–∞–Ω —Ö–∞–±–∞—Ä–¥–∞—Ä –±–æ–ª—ã—û —É—à—ã–Ω –∫–∞–Ω–∞–ª“ì–∞ –∫–∏—Ä–∏“£\n üëâ https://t.me/+oR4I260MLxszYTAy",
            //         ]);
            //     }
            // }
    
            // if ($text === '‚úçÔ∏è –ù–∞—û–±–µ—Ç–∫–µ –∂–∞–∑—ã–ª—ã—û') {
            //     Cache::put("user:{$chatId}:step", "region", 600);
                
            //     $regions = Region::pluck('name')->toArray();
    
            //     $buttons = collect($regions)->chunk(2)->map(function ($chunk) {
            //         return $chunk->values()->all();
            //     })->values()->all();
    
            //     $keyboard = Keyboard::make()
            //         ->setKeyboard($buttons)
            //         ->setResizeKeyboard(true)
            //         ->setOneTimeKeyboard(true);
            
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => "–ü—Ä–æ–ø–∏—Å–∫–∞ —Ç—É—û—ã–ª“ì–∞–Ω —Ä–∞–π–æ–Ω—ã“£—ã–∑–¥—ã —Å–∞–π–ª–∞“£ üî∞\n\n ‚≠ïÔ∏è –ò—Ç–∏–±–∞—Ä –±–µ—Ä–∏“£ —Å–∏–∑ —Å–∞–π–ª–∞“ì–∞–Ω —Ä–∞–π–æ–Ω –±–æ–π—ã–Ω—à–∞ –∏–º—Ç–∏—Ö–∞–Ω–¥—ã ”©–∑–∏“£–∏–∑–≥–µ –∂–∞“õ—ã–Ω –æ—Ä—ã–Ω–¥–∞ —Ç–∞–ø—Å—ã—Ä–∞—Å—ã–∑. –ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø–∏—Å–∫–∞—Å—ã –±–æ–π—ã–Ω—à–∞ —Ä–∞–π–æ–Ω–¥—ã –¥—É—Ä—ã—Å —Å–∞–π–ª–∞“£ ‚ùóÔ∏è",
            //         'reply_markup' => $keyboard
            //     ]);
            // }
    
            // if ($step === 'region') {
            //     $reg = Region::where('name', $text)->first();
    
            //     if (!$reg) {
            //         return $telegram->sendMessage([
            //             'chat_id' => $chatId,
            //             'text' => '‚ùå –ë—É–ª —Ä–µ–≥–∏–æ —Ç–∞–±—ã–ª–º–∞–¥—ã. –ò–ª—Ç–∏–º–∞—Å, —Ç–∏–∑–∏–º–Ω–µ–Ω –±–µ—Ä–∏–ª–≥–µ–Ω —Ä–µ–≥–∏–æ–Ω–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω —Å–∞–π–ª–∞–Ω.',
            //         ]);
            //     }
            //     $branch = $reg->branch->first();
            //     Cache::put("user:{$chatId}:region", $reg->id, 600);
            //     Cache::put("user:{$chatId}:branch", $branch->id, 600);
            //     Cache::put("user:{$chatId}:step", "awaiting_name", 600);
    
    
            //     $keyboard=Keyboard::remove();
    
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => '–§–∞–º–∏–ª–∏—è –∞—Ç—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ –∫–∏—Ä–∏—Ç–∏–Ω ( –ù–æ–∫–∏—Å–±–∞–µ–≤ –û—Ä–∞–ª–±–∞–π)',
            //         'reply_markup' => $keyboard,
            //     ]);
            // }
            // if ($step === 'awaiting_name') {
            //     if (!preg_match('/^([\p{L}]{2,}\s){1,}[\p{L}]{2,}$/u', $text)) {
            //         return $telegram->sendMessage([
            //             'chat_id' => $chatId,
            //             'text' => '‚ùå –§–∞–º–∏–ª–∏—è –∞—Ç—ã“£—ã–∑–¥—ã —Ç–æ–ª—ã“õ –∫–∏—Ä–∏—Ç–∏–Ω ( –ù–æ–∫–∏—Å–±–∞–µ–≤ –û—Ä–∞–ª–±–∞–π)',
            //         ]);
            //     }
            //     Cache::put("user:{$chatId}:name", $text, 600);
            //     Cache::put("user:{$chatId}:step", "awaiting_passport", 600);
    
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => '–ü–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏—è “≥”ô–º –Ω–æ–º–µ—Ä–∏“£–∏–∑–¥–∏ –∫–∏—Ä–≥–∏–∑–∏“£ AA1234567:',
            //     ]);
            // }
    
            // if ($step === 'awaiting_passport') {
            //     if (!preg_match('/^[A-Z]{2}\d{7}$/', $text)) {
            //         return $telegram->sendMessage([
            //             'chat_id' => $chatId,
            //             'text' => '‚ùå –ü–∞—Å–ø–æ—Ä—Ç —Ñ–æ—Ä–º–∞—Ç—ã “õ–∞—Ç–µ. –î—É—Ä—É—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –∫–∏—Ä–≥–∏–∑–∏“£: AA1234567.',
            //         ]);
            //     }
            //     Cache::put("user:{$chatId}:passport", $text, 600);
            //     Cache::put("user:{$chatId}:step", "awaiting_photo", 600);
    
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => 'üì∑ –ê–π–¥–∞—û—à—ã–ª—ã“õ –≥“Ø—û–∞–ª—ã“ì—ã–Ω –∞–ª—ã—û —É—à—ã–Ω —Ç”©–ª–µ–Ω–≥–µ–Ω –∫–≤–∏—Ç–∞–Ω—Ü–∏—è, —ç–∫–∑–∞–º–µ–Ω –±–∏–ª–µ—Ç–∏ —è–º–∞—Å–∞ –±–∞—Å“õ–∞ —Ç–∞—Å—Ç—ã–π—ã“õ–ª–∞—û—à—ã —Ö—É–∂–∂–µ—Ç—Ç–∏  –∂–∏–±–µ—Ä–∏“£. –ü–∞—Å–ø–æ—Ä—Ç –∏–¥ –∫–∞—Ä—Ç–∞ –∂–∏–±–µ—Ä–º–µ–Ω‚ùå',
            //     ]);
            // }
    
            // if ($step === 'awaiting_photo') {
            //     if(!$message->getPhoto()){
            //         return $telegram->sendMessage([
            //             'chat_id' => $chatId,
            //             'text' => '‚ùå –°—É—É—Ä–µ—Ç –∂–∏–±–µ—Ä–∏–Ω',
            //         ]);
            //     }
            //     $customer = Customer::where('telegram_user_id', $chatId)->first();
            //     if ($customer && $customer->full_name === null) {
            //         $customer->update([
            //             'region_id' => $region,
            //             'branch_id' => $branch,
            //             'full_name' => $name,
            //             'passport' => strtoupper($passport),
            //         ]);
            //     }
    
            //     $exists = GayApplication::where('customer_id', $customer->id)
            //         ->whereIn('status_id', [1, 2])
            //         ->exists();
    
            //     if (!$exists) {
            //         $fileName = $this->saveTelegramPhoto($message->getPhoto());
            //         GayApplication::create([
            //             'region_id' => $region,
            //             'branch_id' => $branch,
            //             'customer_id' => $customer->id,
            //             'document_path' => $fileName,
            //             'status_id' => 1,
            //         ]);
            //         $keyboard = Keyboard::make()
            //             ->setResizeKeyboard(true)
            //             ->setOneTimeKeyboard(false)
            //             ->row([
            //                 Keyboard::button(['text' => '‚úçÔ∏è –ù–∞—û–±–µ—Ç–∫–µ –∂–∞–∑—ã–ª—ã—û']),
            //                 Keyboard::button(['text' => 'üìã –ù–∞—û–±–µ—Ç—Ç–∏ —Ç–µ–∫—Å–µ—Ä–∏—û']),
            //             ]);
    
            //         $messageText = "‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è“ì–∞ –Ω–∞—û–±–µ—Ç —É—à—ã–Ω —Å–æ—Ä–∞—û –∂–∏–±–µ—Ä–∏–ª–¥–∏ !\n\n –ù–∞—û–±–µ—Ç–∏“£–∏–∑–¥–∏ –∫“Ø—Ç–∏“£ —Ç–µ–∑ –∞—Ä–∞–¥–∞ —Å–∏–∑–≥–µ “£–∞—û–±–µ—Ç –Ω–æ–º–µ—Ä–∏ –∫–µ–ª–µ–¥–∏, –±–æ—Ç—Ç—ã ”©—à–∏—Ä–∏–ø —Ç–∞—Å–ª–∞–º–∞“£ ‚ùå";
                    
            //         // Tozalash
            //         Cache::forget("user:{$chatId}:step");
            //         Cache::forget("user:{$chatId}:name");
            //         Cache::forget("user:{$chatId}:passport");
    
            //         return $telegram->sendMessage([
            //             'chat_id' => $chatId,
            //             'text' => $messageText,
            //             'reply_markup'=>$keyboard
            //         ]);
            //     } else {
            //         $gay_application=GayApplication::where('customer_id', $customer->id)
            //         ->whereIn('status_id', [1, 2])->first();
            //         if($gay_application->status->key=='active'){
            //             $fileName = $this->saveTelegramPhoto($message->getPhoto());
            //             $number=$gay_application->queueNumber->queue_number;
    
            //             Cache::put("user:{$chatId}:step", "new_queue", 600);
            //             Cache::put("user:{$chatId}:fileName", $fileName, 600);
            //             Cache::put("user:{$chatId}:id", $gay_application->id, 600);
            //             Cache::put("user:{$chatId}:number", $number, 600);
                        
    
            //             $messageText = "‚ùå –°–∏–∑–¥–µ ‚Ññ$number –Ω–∞—û–±–µ—Ç–∏ –±–∞—Ä —Å–æ–Ω—ã –±–∏–π–∫–∞—Ä–ª–∞–ø —Ç–∞–∑–∞ –Ω–∞—û–±–µ—Ç –∞–ª–º–∞“õ—à—ã—Å—ã–∑–±–∞ ?";
                        
            //             $keyboard = Keyboard::make()
            //                 ->setResizeKeyboard(true)
            //                 ->setOneTimeKeyboard(false)
            //                 ->row([
            //                     Keyboard::button(['text' => '–ê—û–∞ —Ç–∞–∑–∞ –Ω”ô—É–±–µ—Ç –∞–ª–∞–º–∞–Ω']),
            //                     Keyboard::button(['text' => '–Ø“õ –Ω–∞—û–±–µ—Ç–∏–º–¥–µ “õ–∞–ª–∞–º–∞–Ω']),
            //                 ]);
            //             return $telegram->sendMessage([
            //                 'chat_id' => $chatId,
            //                 'text' => $messageText,
            //                 'reply_markup'=>$keyboard
            //             ]);
            //         }else{
            //             $messageText = "‚ùå –ï–ª–µ —Å–∏–∑–¥–∏–Ω –Ω–∞—É–±–µ—Ç –∞–∫—Ç–∏–≤ –±–æ–ª–º–∞–¥—ã –∫–∏—Ç—Ç–∞–π –∫—É—Ç–∏–Ω";
            //             // Tozalash
            //             Cache::forget("user:{$chatId}:step");
            //             Cache::forget("user:{$chatId}:name");
            //             Cache::forget("user:{$chatId}:passport");
            //             $keyboard = Keyboard::make()
            //             ->setResizeKeyboard(true)
            //             ->setOneTimeKeyboard(false)
            //             ->row([
            //                 Keyboard::button(['text' => '‚úçÔ∏è –ù–∞—û–±–µ—Ç–∫–µ –∂–∞–∑—ã–ª—ã—û']),
            //                 Keyboard::button(['text' => 'üìã –ù–∞—û–±–µ—Ç—Ç–∏ —Ç–µ–∫—Å–µ—Ä–∏—û']),
            //             ]);
            
            //             return $telegram->sendMessage([
            //                 'chat_id' => $chatId,
            //                 'text' => $messageText,
            //                 'reply_markup'=>$keyboard
            //             ]);
            //         }
            //     }
    
            // }
            // if($step === 'new_queue' && $text==='–ê—û–∞ —Ç–∞–∑–∞ –Ω”ô—É–±–µ—Ç –∞–ª–∞–º–∞–Ω'){
    
            //     $customer = Customer::where('telegram_user_id', $chatId)->first();
            //     GayApplication::where('id','=',Cache::get("user:{$chatId}:id"))->update([
            //         'status_id'=>4
            //     ]);
            //     GayApplication::create([
            //         'region_id' => $region,
            //         'branch_id' => $branch,
            //         'customer_id' => $customer->id,
            //         'document_path' => Cache::get("user:{$chatId}:fileName"),
            //         'status_id' => 1,
            //     ]);
                
            //     $messageText = "‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è“ì–∞ –Ω–∞—û–±–µ—Ç —É—à—ã–Ω —Å–æ—Ä–∞—û –∂–∏–±–µ—Ä–∏–ª–¥–∏ !\n\n –ù–∞—û–±–µ—Ç–∏“£–∏–∑–¥–∏ –∫“Ø—Ç–∏“£ —Ç–µ–∑ –∞—Ä–∞–¥–∞ —Å–∏–∑–≥–µ “£–∞—û–±–µ—Ç –Ω–æ–º–µ—Ä–∏ –∫–µ–ª–µ–¥–∏, –±–æ—Ç—Ç—ã ”©—à–∏—Ä–∏–ø —Ç–∞—Å–ª–∞–º–∞“£ ‚ùå";
                    
            //     // Tozalash
            //     Cache::forget("user:{$chatId}:step");
            //     Cache::forget("user:{$chatId}:name");
            //     Cache::forget("user:{$chatId}:passport");
            //     Cache::forget("user:{$chatId}:fileName");
            //     Cache::forget("user:{$chatId}:number");
            //     Cache::forget("user:{$chatId}:id");
            //     Cache::forget("user:{$chatId}:region");
            //     Cache::forget("user:{$chatId}:branch");
            //     $keyboard = Keyboard::make()
            //         ->setResizeKeyboard(true)
            //         ->setOneTimeKeyboard(false)
            //         ->row([
            //             Keyboard::button(['text' => '‚úçÔ∏è –ù–∞—û–±–µ—Ç–∫–µ –∂–∞–∑—ã–ª—ã—û']),
            //             Keyboard::button(['text' => 'üìã –ù–∞—û–±–µ—Ç—Ç–∏ —Ç–µ–∫—Å–µ—Ä–∏—û']),
            //         ]);
    
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => $messageText,
            //         'reply_markup'=>$keyboard
            //     ]);
            // }
            // if($step === 'new_queue' && $text==='–Ø“õ –Ω–∞—û–±–µ—Ç–∏–º–¥–µ “õ–∞–ª–∞–º–∞–Ω'){
    
            //     $number=Cache::get("user:{$chatId}:number");
    
            //     Cache::forget("user:{$chatId}:step");
            //     Cache::forget("user:{$chatId}:name");
            //     Cache::forget("user:{$chatId}:passport");
            //     Cache::forget("user:{$chatId}:fileName");
            //     Cache::forget("user:{$chatId}:number");
            //     Cache::forget("user:{$chatId}:id");
            //     Cache::forget("user:{$chatId}:region");
            //     Cache::forget("user:{$chatId}:branch");
            //     $keyboard = Keyboard::make()
            //         ->setResizeKeyboard(true)
            //         ->setOneTimeKeyboard(false)
            //         ->row([
            //             Keyboard::button(['text' => '‚úçÔ∏è –ù–∞—û–±–µ—Ç–∫–µ –∂–∞–∑—ã–ª—ã—û']),
            //             Keyboard::button(['text' => 'üìã –ù–∞—û–±–µ—Ç—Ç–∏ —Ç–µ–∫—Å–µ—Ä–∏—û']),
            //         ]);
    
            //     return $telegram->sendMessage([
            //         'chat_id' => $chatId,
            //         'text' => "–°–∏–∑–¥–∏–Ω ‚Ññ$number –Ω–∞—É–±–µ—Ç–∏–Ω–∏–∑ –æ–∑ –æ—Ä–Ω—ã–Ω–¥–∞ –∫–∞–ª–¥—ã",
            //         'reply_markup'=>$keyboard
            //     ]);
                
            // }
        } catch (\Throwable $th) {

            $telegram = new Api(env('TELEGRAM_BOT_TOKEN'));
            $telegram->sendMessage([
                'chat_id' => env('TELEGRAM_MY_CHAT_ID'),
                'text' => $th->getMessage() . ' on line ' . $th->getLine() . ' in ' . $th->getFile()
            ]);
        }
    }


    
    // üñºÔ∏è Rasmni saqlash
    private function saveTelegramPhoto($photos)
    {
        $photoArray = is_array($photos) ? $photos : $photos->all();
        $lastPhoto = end($photoArray);
        $file = Telegram::getFile(['file_id' => $lastPhoto->file_id]);

        $filePath = $file->getFilePath();
        $contents = file_get_contents("https://api.telegram.org/file/bot" . env('TELEGRAM_BOT_TOKEN') . "/" . $filePath);

        $fileName = 'uploads/images/' . uniqid() . '.jpg';
        Storage::disk('public')->put($fileName, $contents);

        return $fileName;
    }
    public function sendAction($action)
    {
        $this->telegram->sendChatAction([
            'chat_id' => $this->chat_id,
            'action' => $action
        ]);

        return $this;
    }

}
